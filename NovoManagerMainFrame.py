"""Subclass of main_frame, which is generated by wxFormBuilder."""
# -*- coding: utf-8 -*-

import wx
import gui
import os

from shell_template import get_kits, get_pipline, get_analy_array
from file2db import file_to_db, files_to_db
from create_config import main
from utilities import record_invalid_sample_id
from create_novo_db import create_novodb
# Implementing main_frame


class NovoManagerMainFrame(gui.main_frame):
    def __init__(self, parent):
        gui.main_frame.__init__(self, parent)

    def get_params(self):
        params = dict()
        params["raw_data_file"] = self.m_filePicker1.GetPath()
        params["raw_data_dir"] = self.m_dirPicker1.GetPath()
        params["analyst"] = self.m_textCtrl1.GetValue()
        params["info_file"] = self.m_filePicker2.GetPath()
        params["seqstrag"] = self.m_textCtrl2.GetValue().upper()
        params["suffix"] = self.m_textCtrl3.GetValue().upper()
        params["disease"] = self.m_textCtrl7.GetValue()
        params["doid"] = self.m_textCtrl8.GetValue()
        params["kit"] = self.m_textCtrl9.GetValue() if self.m_textCtrl9.GetValue() else "V6"
        params["level"] = self.m_textCtrl10.GetValue() if self.m_textCtrl10.GetValue() else "mapping"
        params["place"] = "nanjing" if self.m_checkBox1.GetValue() else "tianjin"
        params["pipline"] = get_pipline(params["place"])
        params["array"] = get_analy_array(
            self.m_textCtrl81.GetValue(),params["level"], params["seqstrag"]
        )
        if params["info_file"]:
            params["path"] = os.path.dirname(params["info_file"])
        return params

    def upload_to_db(self, event):
        paras = self.get_params()
        file_name = paras.get("raw_data_file")
        analyst = paras.get("analyst")
        work_dir = paras.get("raw_data_dir")
        if not file_name and not work_dir:
            self.m_statusBar1.SetStatusText("Please chose a path way file")
            return
        if not analyst:
            self.m_statusBar1.SetStatusText("must input a name of analyst")
            return
        if file_name and analyst:
            self.m_statusBar1.SetStatusText("{} uploading....")
            file_to_db(
                file_name=paras.get("raw_data_file"),
                analyst=paras.get("analyst")
            )
            self.m_statusBar1.SetStatusText("Completed!")
            return
        elif work_dir and analyst:
            self.m_statusBar1.SetStatusText("Uploading.....")
            files_to_db(work_dir=work_dir, analyst=analyst)
            self.m_statusBar1.SetStatusText("Completed!")
            return

    def check_info(self, event):
        paras = self.get_params()
        info_file = paras.get("info_file")
        if not os.path.exists(info_file):
            self.m_statusBar1.SetStatusText("Infomation table file dose not exit")
        else:
            all_valid = record_invalid_sample_id(info_file)
            if not all_valid:
                self.m_statusBar1.SetStatusText("invalid sample name,check your log")
            else:
                self.m_statusBar1.SetStatusText("Congratulations")

    def generate_config(self, event):
        paras = self.get_params()

        if not paras.get("info_file"):
            self.m_statusBar1.SetStatusText("Please chose a information table")
            return
        elif not os.path.exists(paras.get("info_file")):
            self.m_statusBar1.SetStatusText("info table dose not exist")
            return
        if not paras.get("suffix"):
            self.m_statusBar1.SetStatusText("invalid format ex:B1S10")
            return

        self.m_statusBar1.SetStatusText("starting working")
        main(**paras)
        self.m_statusBar1.SetStatusText("Congratulations")


if __name__ == '__main__':
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    if not os.path.exists(os.path.join(BASE_DIR, "novo.db")):
        create_novodb()
    app = wx.App(False)
    frame = NovoManagerMainFrame(None)
    frame.Show()
    app.MainLoop()
